name: Deploy Next.js to EC2

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: '22'

      - name: Install dependencies
        run: npm install

      - name: Write .env file for build (if secret exists)
        run: |
          if [ -n "${{ secrets.ENV_FILE }}" ]; then
            echo "${{ secrets.ENV_FILE }}" > .env
            echo ".env file written"
          else
            echo "No ENV_FILE secret found, skipping .env creation"
          fi

      - name: Build Next.js project
        run: npm run build

      - name: Verify build
        run: ls -la .next

      - name: Prepare artifact (copy entire project)
        run: |
          mkdir -p deploy
          rsync -av --exclude='deploy' ./ deploy/

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-artifact
          path: deploy
          include-hidden-files: true

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: app-artifact
          path: app

      - name: Deploy to EC2 via SCP
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_KEY }}
          source: "app/*"
          target: "~/apps/${{ github.event.repository.name }}/"
          strip_components: 1

      - name: Check and deploy on EC2
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_KEY }}
          script: |
            APP_NAME="${{ github.event.repository.name }}"
            APP_DIR=~/apps/$APP_NAME
            
            # Clean up any existing nested structure
            if [ -d "$APP_DIR/app" ]; then
              echo "🧹 Cleaning up nested app directory"
              mv $APP_DIR/app/* $APP_DIR/ 2>/dev/null || true
              mv $APP_DIR/app/.* $APP_DIR/ 2>/dev/null || true
              rmdir $APP_DIR/app 2>/dev/null || true
            fi
            
            cd $APP_DIR || { echo "❌ Failed to enter directory $APP_DIR"; exit 1; }
            
            echo "📂 Current directory: $(pwd)"
            echo "📁 Directory contents:"
            ls -la
            
            echo "🔹 Checking Node.js installation"
            NODE_UPDATED=false
            if ! command -v node >/dev/null 2>&1; then
              echo "Node.js not found, installing latest LTS..."
              curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
              sudo apt-get install -y nodejs
              NODE_UPDATED=true
            else
              NODE_VERSION=$(node -v)
              LTS_VERSION=$(curl -s https://nodejs.org/dist/index.json | grep -m1 'lts' | sed -E 's/.*"version": "(v[0-9]+\.[0-9]+\.[0-9]+)".*/\1/')
              if [ "$NODE_VERSION" != "$LTS_VERSION" ]; then
                echo "Node.js LTS update available. Installing $LTS_VERSION..."
                curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
                sudo apt-get install -y nodejs
                NODE_UPDATED=true
              else
                echo "Node.js is already latest LTS ($NODE_VERSION)"
              fi
            fi

            echo "🔹 Checking PM2 installation"
            if ! command -v pm2 >/dev/null 2>&1; then
              echo "PM2 not found, installing globally..."
              sudo npm install -g pm2
            else
              echo "PM2 is already installed"
            fi

            # Restart all PM2 processes if Node.js was updated
            if [ "$NODE_UPDATED" = true ]; then
              echo "♻️ Node.js was updated, restarting all PM2 processes"
              pm2 update
            fi

            echo "🔹 Installing production dependencies"
            npm install --omit=dev

            echo "🔹 Starting/restarting current app with PM2"
            if pm2 list | grep -q "$APP_NAME"; then
              echo "♻️ Restarting existing app $APP_NAME"
              pm2 restart "$APP_NAME"
            else
              echo "🚀 Starting new app $APP_NAME"
              pm2 start "npm run start" --name "$APP_NAME"
            fi

            pm2 save
            echo "✅ Deployment complete for $APP_NAME"
